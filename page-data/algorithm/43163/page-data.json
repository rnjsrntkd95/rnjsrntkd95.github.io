{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/43163/","result":{"data":{"site":{"siteMetadata":{"title":"KUSG.io","author":"KU_SANG [RESUME]","siteUrl":"https://rnjsrntkd95.github.io","comment":{"disqusShortName":"","utterances":"rnjsrntkd95/rnjsrntkd95.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"e9d82889-e18d-511b-8f50-0dbcdb90e59e","excerpt":"단어 변환 문제 소개 두 개의 단어 begin, target과 단어의 집합 words가 있습니다. 아래와 같은 규칙을 이용하여 begin에서 target으로 변환하는 가장 짧은 변환 과정을 찾으려고 합니다. 두 개의 단어 begin, target과 단어의 집합 words가 매개변수로 주어질 때, 최소 몇 단계의 과정을 거쳐 begin을 target으로 변환할 수 있는지 return 하도록 solution 함수를 작성해주세요. 한 번에 한 개의 알파벳만 바꿀 수 있습니다. words…","html":"<blockquote>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/43163\">단어 변환</a></p>\n</blockquote>\n<h3 id=\"문제-소개\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%86%8C%EA%B0%9C\" aria-label=\"문제 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 소개</h3>\n<p>두 개의 단어 begin, target과 단어의 집합 words가 있습니다. 아래와 같은 규칙을 이용하여 begin에서 target으로 변환하는 가장 짧은 변환 과정을 찾으려고 합니다.</p>\n<p>두 개의 단어 begin, target과 단어의 집합 words가 매개변수로 주어질 때, 최소 몇 단계의 과정을 거쳐 begin을 target으로 변환할 수 있는지 return 하도록 solution 함수를 작성해주세요.</p>\n<ol>\n<li><strong>한 번에 한 개의 알파벳만 바꿀 수 있습니다.</strong></li>\n<li>\n<p><strong>words에 있는 단어로만 변환할 수 있습니다.</strong></p>\n<ul>\n<li>예를 들어 begin이 <code class=\"language-text\">hit</code>, target가 <code class=\"language-text\">cog</code></li>\n<li>words가 [<code class=\"language-text\">hot</code>,<code class=\"language-text\">dot</code>,<code class=\"language-text\">dog</code>,<code class=\"language-text\">lot</code>,<code class=\"language-text\">log</code>,<code class=\"language-text\">cog</code>] 라면 </li>\n<li><code class=\"language-text\">hit</code> -> <code class=\"language-text\">hot</code> -> <code class=\"language-text\">dot</code> -> <code class=\"language-text\">dog</code> -> <code class=\"language-text\">cog</code>와 같이 4단계를 거쳐 변환할 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<p>target으로 도착하기까지 모든 횟수를 구하지 않고 최소로 변환할 수 있는 횟수만 필요하기 때문에 BFS를 사용했다.</p>\n<ul>\n<li>예를 들어 <code class=\"language-text\">dog</code>라는 단어로 변환될 수 있는 단어들이 많으면 어떡하지라는 생각이 처음엔 들었다.</li>\n<li>하지만 여러 방법이 있더라도 <code class=\"language-text\">dog</code>에서 <code class=\"language-text\">cog</code>로 한번만 변환하면 끝이기 때문에 <code class=\"language-text\">dog</code>로 가는 최소 단계를 찾아나가면 되었다. 이렇게 단계별 최소 단계만 찾아간다.   </li>\n</ul>\n<h2 id=\"시나리오\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-label=\"시나리오 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시나리오</h2>\n<ol>\n<li>\n<p>먼저, begin의 단어가 words의 단어로 교체 가능한 경우 큐에 현재까지의 횟수와 함께 push</p>\n<ul>\n<li><strong>begin과 words 단어의 다른 알파벳이 한 개일 경우에만 교체 가능</strong></li>\n</ul>\n</li>\n<li>words의 길이와 같은 리스트를 생성하여 해당 word를 거쳐갔음을 0, 1로 구분</li>\n<li>반복문을 실행하며 begin과 target이 같으면 횟수를 반환, 답을 찾지 못하고 큐가 비어버리면 0 반환</li>\n</ol>\n<h2 id=\"문제-풀이\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4\" aria-label=\"문제 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 풀이</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    changed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    que <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    que<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        begin<span class=\"token punctuation\">,</span> count <span class=\"token operator\">=</span> que<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">if</span> begin <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span> \n            <span class=\"token keyword\">return</span> count\n        \n        <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> changed<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> tf<span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                changed<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n                que<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>words<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\"># 변환 가능 여부 확인</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">tf</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    same <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            same <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> same <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n<h2 id=\"회고\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EA%B3%A0\" aria-label=\"회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회고</h2>\n<p>BFS 구조 설계하는 시간이 빨라졌다.😎 다음 포스트에는 BFS와 DFS를 구분 짓는 유형을 찾아보려한다.  </p>","frontmatter":{"title":"[BFS] 단어 변환 - Level 3 (프로그래머스)","date":"May 29, 2021"}}},"pageContext":{"slug":"/algorithm/43163/","previous":{"fields":{"slug":"/algorithm/60058/"},"frontmatter":{"title":"괄호 변환 - 2020 KAKAO BLIND RECRUITMENT","date":"May 28, 2021","category":"algorithm","draft":false}},"next":null}},"staticQueryHashes":["3128451518","96099027"]}