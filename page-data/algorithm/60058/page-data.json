{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/60058/","result":{"data":{"site":{"siteMetadata":{"title":"KUSG.io","author":"KU_SANG [RESUME]","siteUrl":"https://rnjsrntkd95.github.io","comment":{"disqusShortName":"","utterances":"rnjsrntkd95/rnjsrntkd95.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"46b2b1c6-3ca0-5718-a285-c7a60f65a4e4","excerpt":"괄호 변환 문제 소개 “균형잡힌 괄호 문자열” p가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 “올바른 괄호 문자열”로 변환한 결과를 return 하도록 solution…","html":"<blockquote>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/60058\">괄호 변환</a></p>\n</blockquote>\n<h3 id=\"문제-소개\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%86%8C%EA%B0%9C\" aria-label=\"문제 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 소개</h3>\n<p>“균형잡힌 괄호 문자열” p가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 “올바른 괄호 문자열”로 변환한 결과를 return 하도록 solution 함수를 완성해 주세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. \n2. 문자열 w를 두 &quot;균형잡힌 괄호 문자열&quot; u, v로 분리합니다. 단, u는 &quot;균형잡힌 괄호 문자열&quot;로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. \n3. 문자열 u가 &quot;올바른 괄호 문자열&quot; 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. \n  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. \n4. 문자열 u가 &quot;올바른 괄호 문자열&quot;이 아니라면 아래 과정을 수행합니다. \n  4-1. 빈 문자열에 첫 번째 문자로 &#39;(&#39;를 붙입니다. \n  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. \n  4-3. &#39;)&#39;를 다시 붙입니다. \n  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. \n  4-5. 생성된 문자열을 반환합니다.</code></pre></div>\n<p>설명이 길어 핵심과 헷갈렸던 부분만 짚어가며 시나리오를 써봤다.</p>\n<h4 id=\"괄호-문자열의-종류\" style=\"position:relative;\"><a href=\"#%EA%B4%84%ED%98%B8-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"괄호 문자열의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>괄호 문자열의 종류</h4>\n<ol>\n<li>“균형잡힌 괄호 문자열” - 괄호가 온전히 열고 닫혔는지는 상관 없이 <strong><code class=\"language-text\">(</code></strong> 와 <strong><code class=\"language-text\">)</code></strong>의 개수만 동일하면 됨.</li>\n<li>“올바른 괄호 문자열” - <strong><code class=\"language-text\">(</code></strong> 와 <strong><code class=\"language-text\">)</code></strong>의 개수만 동일하고 모든 괄호가 온전히 열고 닫힘.</li>\n</ol>\n<h4 id=\"함수-구성\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EA%B5%AC%EC%84%B1\" aria-label=\"함수 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 구성</h4>\n<ol>\n<li>\n<p>입력된 균형잡힌 관호 문자열(p)을 두 개의 균형잡힌 관호 문자열(u, v)로 분할하여 반환한다.</p>\n<ul>\n<li>문자열의 앞에서부터 <strong><code class=\"language-text\">(</code></strong> , <strong><code class=\"language-text\">)</code></strong> 의 개수를 각각 세어 동일해지면 분할</li>\n</ul>\n</li>\n<li>\n<p>입력된 문자열이 “올바른 괄호 문자열”인지 판단하여 True, False 반환</p>\n<ul>\n<li>스택을 이용하여 문자를 하나씩 검토</li>\n<li>스택이 비어있거나 <strong><code class=\"language-text\">(</code></strong>이면 push</li>\n<li>문자가 <strong><code class=\"language-text\">)</code></strong>인데, 스택의 맨 위를 확인(peek)해서 <strong><code class=\"language-text\">(</code></strong>이면 pop</li>\n<li>모든 문자열을 검토한 후 스택이 비어있다면 True, 남아있다면 False</li>\n</ul>\n</li>\n<li>메인 함수</li>\n</ol>\n<h2 id=\"문제-풀이\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4\" aria-label=\"문제 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 풀이</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 변환 로직</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> p<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> p\n    u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> dividing<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span> correcting<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>         \n        <span class=\"token keyword\">return</span> u <span class=\"token operator\">+</span> transform<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    \n    s <span class=\"token operator\">=</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> transform<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> u<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">:</span> s <span class=\"token operator\">+=</span> <span class=\"token string\">\")\"</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> s <span class=\"token operator\">+=</span> <span class=\"token string\">\"(\"</span>\n         \n    <span class=\"token keyword\">return</span> s\n\n<span class=\"token comment\"># 균형 잡힌 두 개의 괄호 문자열로 분할</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dividing</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span> left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> right <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 올바른 괄호 문자열인지 판단.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">correcting</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> stack <span class=\"token keyword\">or</span> i <span class=\"token operator\">==</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">:</span> stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">:</span> stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> stack<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    \n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> transform<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"회고\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EA%B3%A0\" aria-label=\"회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회고</h2>\n<p>문제의 난이도가 높지 않음에도 문제 해석에 많은 시간을 소비한 것이 아쉬웠다. 문제를 제대로 이해하지 못해 질문하시는 분들이 몇몇 계셨다.문제가 복잡할 땐 시나리오나 슈더코드를 작성해보며 설계하는 습관을 들이도록 하자😛</p>","frontmatter":{"title":"괄호 변환 - 2020 KAKAO BLIND RECRUITMENT","date":"May 28, 2021"}}},"pageContext":{"slug":"/algorithm/60058/","previous":{"fields":{"slug":"/algorithm/12973/"},"frontmatter":{"title":"[Stack] 짝지어 제거하기 - Level 2 (프로그래머스)","date":"May 27, 2021","category":"algorithm","draft":false}},"next":null}},"staticQueryHashes":["3128451518","96099027"]}