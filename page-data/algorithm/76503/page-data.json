{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/76503/","result":{"data":{"site":{"siteMetadata":{"title":"KUSG.io","author":"KU_SANG [RESUME]","siteUrl":"https://rnjsrntkd95.github.io","comment":{"disqusShortName":"","utterances":"rnjsrntkd95/rnjsrntkd95.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"387159bc-3ef9-547b-944a-1c317ac51537","excerpt":"모두 0으로 만들기 문제 소개 각 점에 가중치가 부여된 트리가 주어집니다. 당신은 다음 연산을 통하여, 이 트리의 모든 점들의 가중치를 0으로 만들고자 합니다. 임의의 연결된 두 점을 골라서 한쪽은 1 증가시키고, 다른 한쪽은 1 감소시킵니다.\n하지만, 모든 트리가 위의 행동을 통하여 모든 점들의 가중치를 0으로 만들 수 있는 것은 아닙니다. 당신은 주어진 트리에 대해서 해당 사항이 가능한지 판별하고, 만약 가능하다면 최소한의 행동을 통하여 모든 점들의 가중치를…","html":"<blockquote>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/76503\">모두 0으로 만들기</a></p>\n</blockquote>\n<h3 id=\"문제-소개\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%86%8C%EA%B0%9C\" aria-label=\"문제 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 소개</h3>\n<p>각 점에 가중치가 부여된 트리가 주어집니다. 당신은 다음 연산을 통하여, 이 트리의 모든 점들의 가중치를 0으로 만들고자 합니다.</p>\n<p>임의의 연결된 두 점을 골라서 한쪽은 1 증가시키고, 다른 한쪽은 1 감소시킵니다.\n하지만, 모든 트리가 위의 행동을 통하여 모든 점들의 가중치를 0으로 만들 수 있는 것은 아닙니다. 당신은 주어진 트리에 대해서 해당 사항이 가능한지 판별하고, 만약 가능하다면 최소한의 행동을 통하여 모든 점들의 가중치를 0으로 만들고자 합니다.</p>\n<p>트리의 각 점의 가중치를 의미하는 1차원 정수 배열 <code class=\"language-text\">a</code>와 트리의 간선 정보를 의미하는 <code class=\"language-text\">edges</code>가 매개변수로 주어집니다. 주어진 행동을 통해 트리의 모든 점들의 가중치를 0으로 만드는 것이 불가능하다면 -1을, 가능하다면 최소 몇 번만에 가능한지를 찾아 return 하도록 solution 함수를 완성해주세요. (만약 처음부터 트리의 모든 정점의 가중치가 0이라면, 0을 return 해야 합니다.)</p>\n<h2 id=\"시나리오\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-label=\"시나리오 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시나리오</h2>\n<p>문제를 막 접했을 때 연결된 노드의 수가 가장 작은 노드부터 가중치를 0으로 바꿔가겠다는 아이디어는 떠올렸다. 하지만 최소 노드를 반복해서 탐색했기 때문에 결과는 시간 초과였다. 이후, 트리 구조를 상기시키고 dfs에 적용하여 풀이했다.</p>\n<ol>\n<li>가중치의 총 합이 0이 아니라면 불가능하다. <code class=\"language-text\">-1 반환</code>.</li>\n<li>\n<p>연결된 노드의 수가 가장 작은 노드부터 가중치를 0으로 바꿔간다.</p>\n<ul>\n<li>즉, 트리 구조에서 <code class=\"language-text\">단말 노드</code>부터 <code class=\"language-text\">루트 노드</code>까지 올라가며 가중치를 바꿔간다. <code class=\"language-text\">후위 순회(post-order)</code>와 같다.</li>\n<li>어떤 노드를 root로 설정해도 트리 구조가 유지된다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"문제-풀이\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4\" aria-label=\"문제 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 풀이</h2>\n<ol>\n<li>재귀</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>setrecursionlimit<span class=\"token punctuation\">(</span><span class=\"token number\">300000</span><span class=\"token punctuation\">)</span>\n\nanswer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> answer\n    visited<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    \n    <span class=\"token keyword\">for</span> leaf <span class=\"token keyword\">in</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> visited<span class=\"token punctuation\">[</span>leaf<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span>\n        a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dfs<span class=\"token punctuation\">(</span>leaf<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n    answer <span class=\"token operator\">+=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span>\n    \n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">global</span> answer\n    tree <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">for</span> u<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span>\n        tree<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n        tree<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n        \n    dfs<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> answer</code></pre></div>\n<ol start=\"2\">\n<li>반복문</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer<span class=\"token punctuation\">,</span> root <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span>\n    tree <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># 트리 구조</span>\n    <span class=\"token keyword\">for</span> u<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span>\n        tree<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n        tree<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> visited<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            p_node <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            tree<span class=\"token punctuation\">[</span>p_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>discard<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 연결 간선 삭제</span>\n            a<span class=\"token punctuation\">[</span>p_node<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span>\n            answer <span class=\"token operator\">+=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            visited<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">if</span> node <span class=\"token operator\">!=</span> root<span class=\"token punctuation\">:</span>                \n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> l_node <span class=\"token keyword\">in</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>l_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>l_node<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> answer</code></pre></div>\n<h2 id=\"회고\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EA%B3%A0\" aria-label=\"회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회고</h2>\n<p>재귀로 풀 수 있는 모든 문제는 반복문으로도 풀 수 있다고 한다. 이번 문제는 복잡해서 그런지 반복문 풀이를 쉽게 찾아볼 수 없었다. 직접 변환해보면서 머리를 싸맸지만…덕분에 스택을 사용하는 dfs를 연습해봤다. 결국 성공. 도전하길 잘했다. 😐</p>","frontmatter":{"title":"[트리] 모두 0으로 만들기 - 월간 코드 챌린지 시즌 2","date":"June 30, 2021"}}},"pageContext":{"slug":"/algorithm/76503/","previous":{"fields":{"slug":"/algorithm/49189/"},"frontmatter":{"title":"[그래프] 가장 먼 노드 - Level 3 (프로그래머스)","date":"June 29, 2021","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/algorithm/68936/"},"frontmatter":{"title":"쿼드압축 후 개수 세기 - 월간 코드 챌린지 시즌1","date":"July 01, 2021","category":"algorithm","draft":false}}}},"staticQueryHashes":["3128451518","96099027"]}